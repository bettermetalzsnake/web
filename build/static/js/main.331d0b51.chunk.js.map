{"version":3,"sources":["Api.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","process","email","password","a","axios","post","token","id","userId","get","headers","Authorization","loginUser","getUser","App","state","user","e","preventDefault","api","data","setState","inputChange","target","value","renderLoginForm","onSubmit","htmlFor","onChange","name","type","this","className","firstname","lastname","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAEMA,EAAUC,wB,4CAEhB,WAA0BC,EAAOC,GAAjC,SAAAC,EAAA,+EACSC,IAAMC,KAAN,UAAcN,EAAd,sBAA2C,CAAEE,QAAOC,cAD7D,4C,kEAIA,WAAwBI,GAAxB,iBAAAH,EAAA,6DACUI,EAAeD,EAAfC,GAAIC,EAAWF,EAAXE,OADd,kBAGSJ,IAAMK,IAAN,UAAaV,EAAb,wBAAoCS,GAAU,CACnDE,QAAS,CACPC,cAAeJ,MALrB,4C,sBAUe,OAAEK,U,8CAAWC,Q,6CC8CTC,G,iNAzDbC,MAAQ,CACNC,KAAM,KACNf,MAAO,GACPC,SAAU,I,EAGZU,U,uCAAY,WAAOK,GAAP,2BAAAd,EAAA,6DACVc,EAAEC,iBADQ,EAGkB,EAAKH,MAAzBd,EAHE,EAGFA,MAAOC,EAHL,EAGKA,SAHL,SAKoBiB,EAAIP,UAAUX,EAAOC,GALzC,uBAKII,EALJ,EAKFc,KALE,SAOmBD,EAAIN,QAAQP,GAP/B,gBAOIU,EAPJ,EAOFI,KAER,EAAKC,SAAS,CAAEL,SATN,4C,wDAYZM,YAAc,SAAAL,GAAC,OAAI,EAAKI,SAAL,eAAiBJ,EAAEM,OAAOhB,GAAKU,EAAEM,OAAOC,S,EAE3DC,gBAAkB,WAAO,IAAD,EACM,EAAKV,MAAzBd,EADc,EACdA,MAAOC,EADO,EACPA,SAEf,OACE,0BAAMwB,SAAU,EAAKd,WACnB,wDACA,2BAAOe,QAAQ,SACb,wCACA,2BAAOC,SAAU,EAAKN,YAAaE,MAAOvB,EAAOM,GAAG,QAAQsB,KAAK,QAAQC,KAAK,WAEhF,6BACA,2BAAOH,QAAQ,YACb,2CACA,2BAAOC,SAAU,EAAKN,YAAaE,MAAOtB,EAAUK,GAAG,WAAWsB,KAAK,WAAWC,KAAK,cAEzF,6BACA,4BAAQA,KAAK,UAAb,W,wEAKK,IACDd,EAASe,KAAKhB,MAAdC,KAER,OACE,yBAAKgB,UAAU,OACZhB,EACC,oCACE,+CAAiBA,EAAKf,MAAtB,MACA,oDAAsBe,EAAKiB,UAA3B,YAAwCjB,EAAKkB,YAE7CH,KAAKN,uB,GApDCU,cCQFC,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCdNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.331d0b51.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst API_URL = process.env.REACT_APP_API_URL\n\nasync function loginUser (email, password) {\n  return axios.post(`${API_URL}/api/clients/login`, { email, password })\n}\n\nasync function getUser (token) {\n  const { id, userId } = token\n\n  return axios.get(`${API_URL}/api/clients/${userId}`, {\n    headers: {\n      Authorization: id,\n    },\n  })\n}\n\nexport default { loginUser, getUser }","import React, { Component } from 'react'\n\n    import api from './Api'\n    \n    import './App.css'\n    \n    class App extends Component {\n      state = {\n        user: null,\n        email: '',\n        password: '',\n      }\n    \n      loginUser = async (e) => {\n        e.preventDefault()\n    \n        const { email, password } = this.state\n    \n        const { data: token } = await api.loginUser(email, password)\n    \n        const { data: user } = await api.getUser(token)\n    \n        this.setState({ user })\n      }\n    \n      inputChange = e => this.setState({ [e.target.id]: e.target.value })\n    \n      renderLoginForm = () => {\n        const { email, password } = this.state\n    \n        return (\n          <form onSubmit={this.loginUser}>\n            <h1>An Awesome Form on React</h1>\n            <label htmlFor=\"email\">\n              <span>Email:</span>\n              <input onChange={this.inputChange} value={email} id=\"email\" name=\"email\" type=\"email\" />\n            </label>\n            <br />\n            <label htmlFor=\"password\">\n              <span>Password:</span>\n              <input onChange={this.inputChange} value={password} id=\"password\" name=\"password\" type=\"password\" />\n            </label>\n            <br />\n            <button type=\"submit\">Login</button>\n          </form>\n        )\n      }\n    \n      render () {\n        const { user } = this.state\n    \n        return (\n          <div className=\"App\">\n            {user ? (\n              <>\n                <div>{`Welcome ${user.email}!`}</div>\n                <div>{`Your name is ${user.firstname} ${user.lastname}`}</div>\n              </>\n            ) : this.renderLoginForm()}\n          </div>\n        )\n      }\n    }\n    \n    export default App\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}